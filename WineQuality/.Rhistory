wine <- read.csv("whitewines.csv")
str(wine)
hist(wine$quality)
wine_train <- wine[1:3750,]
wine_test <- wine [3751:4898,]
install.packages(rpart)
#This example shows how to estimate quality of wine with
#regression trees
#install.packages('rpart') #rpart has a good implementation of regression trees
library("rpart")
wine <- read.csv("whitewines.csv")
str(wine)
hist(wine$quality)
#wine is alread sorted in random order, so we can break into two datasets
wine_train <- wine[1:3750,]
wine_test <- wine [3751:4898,]
m.rpart <- rpart(quality ~ .,data = wine_train)
m.rpart
#use rpart.plot to get good visualization of decision tree
#install.packages('rpart.plot')
library (rpart.plot)
rpart.plot(m.rpart, digits = 3)
p.rpart <- predict(m.rpart, wine_test)
cor(p.rpart,wine_test$quality)
p.rpart
wine_test$quality
summary(p.rpart)
install.package(RWeka)
install.package("RWeka")
Library("RWeka")
install.package("rWeka")
install.packages("rWeka")
install.packages("RWeka")
library("RWeka")
install.package("rjava")
install.packages("rjava")
install.packages("rJava")
library("rJava")
library("RWeka")
library("rJava")
libary("rJava")
library("rJava")
install.packages("rJava")
library("rJava")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
#This example shows how to estimate quality of wine with
#regression trees
#install.packages(rpart) #rpart has a good implementation of regression trees
library("rpart")
if (Sys.getenv("JAVA_HOME")!="") #cannot load rjava if JAVA_HOME is set
Sys.setenv(JAVA_HOME="")
library(rJava)
wine <- read.csv("whitewines.csv")
#str(wine)
hist(wine$quality)
#wine is alread sorted in random order, so we can break into two datasets
wine_train <- wine[1:3750,]
wine_test <- wine [3751:4898,]
m.rpart <- rpart(quality ~ .,data = wine_train)
m.rpart
install.packages("rpart.rplot")
install.packages("rplot")
install.packages("rpart rplot")
install.packages("rpart.rplot")
install.packages("rpart.plot")
library("rpart.plot")
rpart.plot(m.rpart,digits = 3)
rpart.plot(m.rpart,digits =4, fallen.leaves = TRUE, type = 3, extra= 101)
p.rpart <-predict(m.rpart,wine_test)
summary(p.rpart)
cor(p.rpart, wine_test$quality)
MAE <- function(actual,predicted){
mean(abs(actual - predicted))
}
MAE(p.rpart, wine_test$quality)
install.packages('RWeka')
library('RWeka')
m.m5p <-(quality ~ ., data = wine_train)
m.m5p <-M5P(quality ~ ., data = wine_train)
m.m5p
summary(m.m5p)
p.m5p <- predict(m.m5p,wine_test)
cor(p.m5p, wine_test$quality)
MAE(p.m5p, wine_test$quality)
